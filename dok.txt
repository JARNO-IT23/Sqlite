H12
.open jorusalu.db
CREATE TABLE kasutajad(
id INTEGER PRIMARY KEY AUTOINCREMENT,
first_name TEXT NOT NULL,
last_name TEXT NOT NULL,
email TEXT NOT NULL,
telefon TEXT NOT NULL
);
.tables
ALTER TABLE kasutajad RENAME TO users;
.tables
ALTER TABLE users RENAME COLUMN telefon TO phone;
.schema users
ALTER TABLE users ADD COLUMN image TEXT;
.schema users
h13
INSERT INTO users (first_name, last_name, email, phone, image) VALUES 
('Rain', 'Tamm', 'rain@example.com', '3725555555', 'rain.jpg'),
('Mati', 'Kask', 'mati@example.com', '3724444444', 'mati.jpg');
.read users.sql
H14
SELECT * FROM users ORDER BY last_name ASC LIMIT 3;

SELECT * FROM users WHERE first_name LIKE 'G%' AND email LIKE '%.com' ORDER BY first_name DESC;

select id, first_name, last_name, phone, 
	CASE 
		WHEN phone like '546%' 
			THEN 'Eesti' 
		ELSE 'VÃ¤lismaa' 
END as riik FROM users;

SELECT first_name, last_name, email, phone,
	CASE 
		WHEN email LIKE '%.edu.ee' OR '%.gov' 
THEN 'HARIDUSASUTUS'
		ELSE 'ERAFIMRA'
	END AS email_kuuluvus
FROM users WHERE phone LIKE '372%' ORDER BY last_name ASC LIMIT 10;
H15
UPDATE users
SET email = 'muudetud@gmail.com', phone = 123
WHERE first_name = 'rain';
DELETE FROM users WHERE id >= 5 AND id <= 10;
H16
.open jarno.db

CREATE TABLE users(
id INTEGER PRIMARY KEY AUTOINCREMENT,
eesnimi TEXT NOT NULL,
perenimi TEXT NOT NULL,
email TEXT NOT NULL,
tel TEXT NOT NULL,
profiilipilt TEXT NOT NULL
);

CREATE TABLE bookings(
id INTEGER PRIMARY KEY AUTOINCREMENT,
users_id INTEGER,
rooms_id INTEGER,
saabumine TEXT NOT NULL,
lahkumine TEXT NOT NULL,
FOREIGN KEY (users_id) REFERENCES users(id),
FOREIGN KEY (rooms_id) REFERENCES rooms(id)
);

CREATE TABLE rooms(
id INTEGER PRIMARY KEY AUTOINCREMENT,
toa_number TEXT NOT NULL,
toa_tyyp TEXT NOT NULL,
toa_hind INTEGER NOT NULL,
toa_saadavus TEXT NOT NULL
);

CREATE TABLE payments(
id INTEGER PRIMARY KEY AUTOINCREMENT,
bookings_id INTEGER,
arve_summa TEXT NOT NULL,
tasumis_paev TEXT NOT NULL,
makseviis TEXT NOT NULL,
FOREIGN KEY (bookings_id) REFERENCES bookings(id)
);

.read users2.sql
.read bookings.sql
.read payments.sql
.read rooms.sql

select users.eesnimi, users.perenimi, rooms.toa_number, rooms.toa_tyyp
FROM bookings
INNER JOIN users ON bookings.users_id = users.id
INNER JOIN rooms ON bookings.rooms_id= rooms.id;

select payments.tasumis_paev, payments.arve_summa
FROM bookings
INNER JOIN payments ON bookings.id = payments.id;

select users.eesnimi, users.perenimi, rooms.toa_tyyp, rooms.toa_hind, bookings.saabumine, bookings.lahkumine, payments.arve_summa, payments.tasumis_paev, payments.makseviis
FROM bookings
INNER JOIN users ON bookings.users_id = users.id
INNER JOIN rooms ON bookings.rooms_id = rooms.id
INNER JOIN payments ON bookings.users_id = payments.id; 
H17 
SELECT count(users_id), users.eesnimi, users.perenimi
FROM bookings
INNER JOIN users ON bookings.users_id = users.id
GROUP BY users_id
HAVING count(users_id) > 2
;

SELECT COUNT(rooms_id) AS Kordus, SUM(payments.arve_summa) AS Summa, users.eesnimi, users.perenimi
FROM bookings
INNER JOIN users ON users.id = bookings.users_id
INNER JOIN payments on payments.id = bookings.id
GROUP BY users_id
;

SELECT COUNT(rooms_id) AS kordus, users.eesnimi, users.perenimi
FROM bookings
INNER JOIN users ON users.id = bookings.users_id
GROUP BY users_id
;

SELECT count(users_id)
FROM bookings
WHERE users_id IN (
	SELECT users_id
	FROM bookings
	GROUP BY users_id
	HAVING count(users_id) > 2
)
GROUP BY users_id;


